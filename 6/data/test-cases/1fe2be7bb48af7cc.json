{"uid":"1fe2be7bb48af7cc","name":"Unsuccessful form submission [empty email & message----400]","fullName":"features/main_page.feature:Unsuccessful form submission","historyId":"a69027c8337d85622ca805f0bd727a20","time":{"start":1731553272401,"stop":1731553274596,"duration":2195},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","statusTrace":"fixturefunc = <function step_verify_submission_status_code at 0x7fe9a95ab430>\nrequest = <FixtureRequest for <Function test_unsuccessful_form_submission[empty email & message----400]>>\nkwargs = {'main_page': <pages.main_page.MainPage object at 0x7fe9a8159190>, 'status_code': '400'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmain_page = <pages.main_page.MainPage object at 0x7fe9a8159190>\nstatus_code = '400'\n\n    @then(cfparse('I should see a \"{status_code}\" response for the form submission'))\n    def step_verify_submission_status_code(main_page: MainPage, status_code):\n        actual_status = main_page.submission_response.status\n>       assert actual_status == int(status_code), f\"Expected status code {status_code}, but got {actual_status}\"\nE       AssertionError: Expected status code 400, but got 401\nE       assert 401 == 400\nE        +  where 400 = int('400')\n\ntests/step_defs/test_main_page_bdd.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","statusTrace":"fixturefunc = <function step_verify_submission_status_code at 0x7fe9a95ab430>\nrequest = <FixtureRequest for <Function test_unsuccessful_form_submission[empty email & message----400]>>\nkwargs = {'main_page': <pages.main_page.MainPage object at 0x7fe9a8159190>, 'status_code': '400'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmain_page = <pages.main_page.MainPage object at 0x7fe9a8159190>\nstatus_code = '400'\n\n    @then(cfparse('I should see a \"{status_code}\" response for the form submission'))\n    def step_verify_submission_status_code(main_page: MainPage, status_code):\n        actual_status = main_page.submission_response.status\n>       assert actual_status == int(status_code), f\"Expected status code {status_code}, but got {actual_status}\"\nE       AssertionError: Expected status code 400, but got 401\nE       assert 401 == 400\nE        +  where 400 = int('400')\n\ntests/step_defs/test_main_page_bdd.py:42: AssertionError","steps":[{"name":"Given I open the main page","time":{"start":1731553272401,"stop":1731553273956,"duration":1555},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When I fill the form with name \"empty email & message\", email \"\", message \"\", and request type \"\"","time":{"start":1731553273956,"stop":1731553274083,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And I submit the form","time":{"start":1731553274083,"stop":1731553274595,"duration":512},"status":"passed","steps":[],"attachments":[{"uid":"c6453bc3f7972905","name":"Submission Response","source":"c6453bc3f7972905.txt","type":"text/plain","size":58}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Then I should see a \"400\" response for the form submission","time":{"start":1731553274596,"stop":1731553274596,"duration":0},"status":"failed","statusMessage":"Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","statusTrace":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1391-982"},{"name":"thread","value":"3109-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Main page form submission"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email"},{"name":"message"},{"name":"name","value":"empty email & message"},{"name":"request_type"},{"name":"status_code","value":"400"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1fe2be7bb48af7cc.json","parameterValues":[null,null,"empty email & message",null,"400"]}