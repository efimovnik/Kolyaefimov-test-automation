{"uid":"4c281a735c02b123","name":"Unsuccessful form submission [----400]","fullName":"features/main_page.feature:Unsuccessful form submission","historyId":"eee730d3c33e5a647f83e89d7d48fad1","time":{"start":1731553692856,"stop":1731553696223,"duration":3367},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","statusTrace":"fixturefunc = <function step_verify_submission_status_code at 0x7f29fbd0e3a0>\nrequest = <FixtureRequest for <Function test_unsuccessful_form_submission[----400]>>\nkwargs = {'main_page': <pages.main_page.MainPage object at 0x7f2a0115d2b0>, 'status_code': '400'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmain_page = <pages.main_page.MainPage object at 0x7f2a0115d2b0>\nstatus_code = '400'\n\n    @then(cfparse('I should see a \"{status_code}\" response for the form submission'))\n    def step_verify_submission_status_code(main_page: MainPage, status_code):\n        actual_status = main_page.submission_response.status\n>       assert actual_status == int(status_code), f\"Expected status code {status_code}, but got {actual_status}\"\nE       AssertionError: Expected status code 400, but got 401\nE       assert 401 == 400\nE        +  where 400 = int('400')\n\ntests/step_defs/test_main_page_bdd.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","statusTrace":"fixturefunc = <function step_verify_submission_status_code at 0x7f29fbd0e3a0>\nrequest = <FixtureRequest for <Function test_unsuccessful_form_submission[----400]>>\nkwargs = {'main_page': <pages.main_page.MainPage object at 0x7f2a0115d2b0>, 'status_code': '400'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmain_page = <pages.main_page.MainPage object at 0x7f2a0115d2b0>\nstatus_code = '400'\n\n    @then(cfparse('I should see a \"{status_code}\" response for the form submission'))\n    def step_verify_submission_status_code(main_page: MainPage, status_code):\n        actual_status = main_page.submission_response.status\n>       assert actual_status == int(status_code), f\"Expected status code {status_code}, but got {actual_status}\"\nE       AssertionError: Expected status code 400, but got 401\nE       assert 401 == 400\nE        +  where 400 = int('400')\n\ntests/step_defs/test_main_page_bdd.py:42: AssertionError","steps":[{"name":"Given I open the main page","time":{"start":1731553692857,"stop":1731553695325,"duration":2468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When I fill the form with name \"\", email \"\", message \"\", and request type \"\"","time":{"start":1731553695325,"stop":1731553695610,"duration":285},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And I submit the form","time":{"start":1731553695610,"stop":1731553696221,"duration":611},"status":"passed","steps":[],"attachments":[{"uid":"5eb9d393e8aa0dad","name":"Submission Response","source":"5eb9d393e8aa0dad.txt","type":"text/plain","size":58}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Then I should see a \"400\" response for the form submission","time":{"start":1731553696222,"stop":1731553696222,"duration":0},"status":"failed","statusMessage":"Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","statusTrace":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1024-569"},{"name":"thread","value":"3045-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Main page form submission"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email"},{"name":"message"},{"name":"name"},{"name":"request_type"},{"name":"status_code","value":"400"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"c7ab07dce03fa929","reportUrl":"https://efimovnik.github.io/Kolyaefimov-test-automation/6//#testresult/c7ab07dce03fa929","status":"failed","statusDetails":"AssertionError: Expected status code 400, but got 401\nassert 401 == 400\n +  where 400 = int('400')","time":{"start":1731553268657,"stop":1731553272315,"duration":3658}}]},"tags":[]},"source":"4c281a735c02b123.json","parameterValues":[null,null,null,null,"400"]}